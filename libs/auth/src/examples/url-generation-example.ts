import { Knex } from 'knex';
import {
  PlunkEmailVerificationService,
  PlunkVerificationConfig,
} from '../services/plunk-verification.service';
import { AppUser } from './types';

/**
 * Example of how to use the URL generation features of PlunkEmailVerificationService
 */
export async function setupWithUrlGeneration(knex: Knex) {
  // Configure the service with URL generation options
  const config: PlunkVerificationConfig = {
    // Plunk API key
    apiKey: process.env.PLUNK_API_KEY || '',

    // Email sender details
    fromEmail: 'noreply@yourdomain.com',
    fromName: 'Your App',

    // Use nodemailer with Plunk SMTP
    useNodemailer: true,

    // Base URLs for verification and reset links
    verificationUrlBase: 'https://yourdomain.com/verify',
    resetUrlBase: 'https://yourdomain.com/reset-password',

    // Custom query parameter name for the token (default is 'token')
    tokenQueryParam: 'code',

    // Additional query parameters to include in all URLs
    additionalQueryParams: {
      source: 'email',
      app: 'myapp',
    },
  };

  // Create the service
  const verificationService = new PlunkEmailVerificationService(knex, config);

  // Example user
  const user: AppUser = {
    id: '123',
    email: 'user@example.com',
    name: 'John Doe',
    email_verified: false,
    phone_verified: false,
    created_at: new Date(),
    updated_at: new Date(),
    mfa_enabled: false,
  };

  // Example 1: Generate a verification URL manually
  const verificationToken = 'abc123'; // This would normally be generated by the service
  const verificationUrl = verificationService.generateVerificationUrl(
    verificationToken,
    user.id
  );
  console.log('Verification URL:', verificationUrl);
  // Output: https://yourdomain.com/verify?code=abc123&userId=123&source=email&app=myapp

  // Example 2: Generate a reset URL manually
  const resetToken = 'xyz789'; // This would normally be generated by the service
  const resetUrl = verificationService.generateResetUrl(resetToken, user.id);
  console.log('Reset URL:', resetUrl);
  // Output: https://yourdomain.com/reset-password?code=xyz789&userId=123&source=email&app=myapp

  // Example 3: Send verification email and get the token
  const generatedToken = await verificationService.sendVerificationEmail(
    user.email,
    user
  );
  console.log('Generated verification token:', generatedToken);

  // Example 4: Send password reset email without providing a reset URL
  // The service will use the resetUrlBase from the config
  const generatedResetToken = await verificationService.sendPasswordResetEmail(
    user.email,
    user
  );
  console.log('Generated reset token:', generatedResetToken);

  // Example 5: Send password reset email with a custom reset URL
  // This will override the resetUrlBase from the config
  const customResetToken = await verificationService.sendPasswordResetEmail(
    user.email,
    user,
    'https://yourdomain.com/custom-reset'
  );
  console.log('Custom reset token:', customResetToken);

  return verificationService;
}
